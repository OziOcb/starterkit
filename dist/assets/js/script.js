!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(g,e){"use strict";var t=[],m=g.document,r=Object.getPrototypeOf,a=t.slice,v=t.concat,l=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,s=y.toString,u=s.call(Object),b={},_=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},w=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,noModule:!0};function E(e,t,n){var r,i=(t=t||m).createElement("script");if(i.text=e,n)for(r in c)n[r]&&(i[r]=n[r]);t.head.appendChild(i).parentNode.removeChild(i)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.3.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",T=function(e,t){return new T.fn.init(e,t)},d=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function h(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!_(e)&&!w(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}T.fn=T.prototype={jquery:f,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(n){return this.pushStack(T.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},T.extend=T.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||_(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(u&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&T.isPlainObject(n)?n:{},s[t]=T.extend(u,o,r)):void 0!==r&&(s[t]=r));return s},T.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e)||(t=r(e))&&("function"!=typeof(n=y.call(t,"constructor")&&t.constructor)||s.call(n)!==u))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){E(e)},each:function(e,t){var n,r=0;if(h(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(d,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(h(Object(e))?T.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(h(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return v.apply([],s)},guid:1,support:b}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=t[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var p=function(n){var e,h,_,o,i,p,f,g,w,l,u,E,C,s,T,m,a,c,v,x="sizzle"+1*new Date,y=n.document,S=0,r=0,d=se(),b=se(),D=se(),A=function(e,t){return e===t&&(u=!0),0},O={}.hasOwnProperty,t=[],N=t.pop,k=t.push,I=t.push,j=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+q+"*("+H+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+q+"*\\]",W=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",F=new RegExp(q+"+","g"),M=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),B=new RegExp("^"+q+"*,"+q+"*"),U=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),Q=new RegExp("="+q+"*([^\\]'\"]*?)"+q+"*\\]","g"),K=new RegExp(W),$=new RegExp("^"+H+"$"),V={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,z=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,G=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+q+"?|("+q+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){E()},ie=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{I.apply(t=j.call(y.childNodes),y.childNodes),t[y.childNodes.length].nodeType}catch(n){I={apply:t.length?function(e,t){k.apply(e,j.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,n,r){var i,o,s,a,l,u,c,f=t&&t.ownerDocument,d=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return n;if(!r&&((t?t.ownerDocument||t:y)!==C&&E(t),t=t||C,T)){if(11!==d&&(l=G.exec(e)))if(i=l[1]){if(9===d){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(f&&(s=f.getElementById(i))&&v(t,s)&&s.id===i)return n.push(s),n}else{if(l[2])return I.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&h.getElementsByClassName&&t.getElementsByClassName)return I.apply(n,t.getElementsByClassName(i)),n}if(h.qsa&&!D[e+" "]&&(!m||!m.test(e))){if(1!==d)f=t,c=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(te,ne):t.setAttribute("id",a=x),o=(u=p(e)).length;o--;)u[o]="#"+a+" "+ve(u[o]);c=u.join(","),f=J.test(e)&&ge(t.parentNode)||t}if(c)try{return I.apply(n,f.querySelectorAll(c)),n}catch(e){}finally{a===x&&t.removeAttribute("id")}}}return g(e.replace(M,"$1"),t,n,r)}function se(){var r=[];return function e(t,n){return r.push(t+" ")>_.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function ae(e){return e[x]=!0,e}function le(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),r=n.length;r--;)_.attrHandle[n[r]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function de(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function he(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ie(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function pe(s){return ae(function(o){return o=+o,ae(function(e,t){for(var n,r=s([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=oe.support={},i=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},E=oe.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:y;return r!==C&&9===r.nodeType&&r.documentElement&&(s=(C=r).documentElement,T=!i(C),y!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",re,!1):n.attachEvent&&n.attachEvent("onunload",re)),h.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=le(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=X.test(C.getElementsByClassName),h.getById=le(function(e){return s.appendChild(e).id=x,!C.getElementsByName||!C.getElementsByName(x).length}),h.getById?(_.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},_.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n=t.getElementById(e);return n?[n]:[]}}):(_.filter.ID=function(e){var n=e.replace(Z,ee);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},_.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),_.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},_.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&T)return t.getElementsByClassName(e)},a=[],m=[],(h.qsa=X.test(C.querySelectorAll))&&(le(function(e){s.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+q+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+q+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+q+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(h.matchesSelector=X.test(c=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&le(function(e){h.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),a.push("!=",W)}),m=m.length&&new RegExp(m.join("|")),a=a.length&&new RegExp(a.join("|")),t=X.test(s.compareDocumentPosition),v=t||X.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===y&&v(y,e)?-1:t===C||t.ownerDocument===y&&v(y,t)?1:l?P(l,e)-P(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e===C?-1:t===C?1:i?-1:o?1:l?P(l,e)-P(l,t):0;if(i===o)return ce(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?ce(s[r],a[r]):s[r]===y?-1:a[r]===y?1:0}),C},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&E(e),t=t.replace(Q,"='$1']"),h.matchesSelector&&T&&!D[t+" "]&&(!a||!a.test(t))&&(!m||!m.test(t)))try{var n=c.call(e,t);if(n||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return 0<oe(t,C,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!==C&&E(e),v(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==C&&E(e);var n=_.attrHandle[t.toLowerCase()],r=n&&O.call(_.attrHandle,t.toLowerCase())?n(e,t,!T):void 0;return void 0!==r?r:h.attributes||!T?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],r=0,i=0;if(u=!h.detectDuplicates,l=!h.sortStable&&e.slice(0),e.sort(A),u){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return l=null,e},o=oe.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(_=oe.selectors={cacheLength:50,createPseudo:ae,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&K.test(n)&&(t=p(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=d[e+" "];return t||(t=new RegExp("(^|"+q+")"+e+"("+q+"|$)"))&&d(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=oe.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(F," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(p,e,t,g,m){var v="nth"!==p.slice(0,3),y="last"!==p.slice(-4),b="of-type"===e;return 1===g&&0===m?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,s,a,l,u=v!==y?"nextSibling":"previousSibling",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,h=!1;if(c){if(v){for(;u;){for(s=e;s=s[u];)if(b?s.nodeName.toLowerCase()===f:1===s.nodeType)return!1;l=u="only"===p&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&d){for(h=(a=(r=(i=(o=(s=c)[x]||(s[x]={}))[s.uniqueID]||(o[s.uniqueID]={}))[p]||[])[0]===S&&r[1])&&r[2],s=a&&c.childNodes[a];s=++a&&s&&s[u]||(h=a=0)||l.pop();)if(1===s.nodeType&&++h&&s===e){i[p]=[S,a,h];break}}else if(d&&(h=a=(r=(i=(o=(s=e)[x]||(s[x]={}))[s.uniqueID]||(o[s.uniqueID]={}))[p]||[])[0]===S&&r[1]),!1===h)for(;(s=++a&&s&&s[u]||(h=a=0)||l.pop())&&((b?s.nodeName.toLowerCase()!==f:1!==s.nodeType)||!++h||(d&&((i=(o=s[x]||(s[x]={}))[s.uniqueID]||(o[s.uniqueID]={}))[p]=[S,h]),s!==e)););return(h-=m)===g||h%g==0&&0<=h/g}}},PSEUDO:function(e,o){var t,s=_.pseudos[e]||_.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return s[x]?s(o):1<s.length?(t=[e,e,"",o],_.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,t){for(var n,r=s(e,o),i=r.length;i--;)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ae(function(e){var r=[],i=[],a=f(e.replace(M,"$1"));return a[x]?ae(function(e,t,n,r){for(var i,o=a(e,null,r,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))}):function(e,t,n){return r[0]=e,a(r,null,n,i),r[0]=null,!i.pop()}}),has:ae(function(t){return function(e){return 0<oe(t,e).length}}),contains:ae(function(t){return t=t.replace(Z,ee),function(e){return-1<(e.textContent||e.innerText||o(e)).indexOf(t)}}),lang:ae(function(n){return $.test(n||"")||oe.error("unsupported lang: "+n),n=n.replace(Z,ee).toLowerCase(),function(e){var t;do{if(t=T?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!_.pseudos.empty(e)},header:function(e){return z.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:pe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:pe(function(e,t,n){for(var r=n<0?n+t:n;0<=--r;)e.push(r);return e}),gt:pe(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=_.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})_.pseudos[e]=de(e);function me(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(a,e,t){var l=e.dir,u=e.next,c=u||l,f=t&&"parentNode"===c,d=r++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||f)return a(e,t,n);return!1}:function(e,t,n){var r,i,o,s=[S,d];if(n){for(;e=e[l];)if((1===e.nodeType||f)&&a(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||f)if(i=(o=e[x]||(e[x]={}))[e.uniqueID]||(o[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((r=i[c])&&r[0]===S&&r[1]===d)return s[2]=r[2];if((i[c]=s)[2]=a(e,t,n))return!0}return!1}}function be(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function _e(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),u&&t.push(a)));return s}function we(h,p,g,m,v,e){return m&&!m[x]&&(m=we(m)),v&&!v[x]&&(v=we(v,e)),ae(function(e,t,n,r){var i,o,s,a=[],l=[],u=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(p||"*",n.nodeType?[n]:n,[]),f=!h||!e&&p?c:_e(c,a,h,n,r),d=g?v||(e?h:u||m)?[]:t:f;if(g&&g(f,d,n,r),m)for(i=_e(d,l),m(i,[],n,r),o=i.length;o--;)(s=i[o])&&(d[l[o]]=!(f[l[o]]=s));if(e){if(v||h){if(v){for(i=[],o=d.length;o--;)(s=d[o])&&i.push(f[o]=s);v(null,d=[],i,r)}for(o=d.length;o--;)(s=d[o])&&-1<(i=v?P(e,s):a[o])&&(e[i]=!(t[i]=s))}}else d=_e(d===t?d.splice(u,d.length):d),v?v(null,t,d,r):I.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=_.relative[e[0].type],s=o||_.relative[" "],a=o?1:0,l=ye(function(e){return e===i},s,!0),u=ye(function(e){return-1<P(i,e)},s,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?l(e,t,n):u(e,t,n));return i=null,r}];a<r;a++)if(t=_.relative[e[a].type])c=[ye(be(c),t)];else{if((t=_.filter[e[a].type].apply(null,e[a].matches))[x]){for(n=++a;n<r&&!_.relative[e[n].type];n++);return we(1<a&&be(c),1<a&&ve(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(M,"$1"),t,a<n&&Ee(e.slice(a,n)),n<r&&Ee(e=e.slice(n)),n<r&&ve(e))}c.push(t)}return be(c)}return me.prototype=_.filters=_.pseudos,_.setFilters=new me,p=oe.tokenize=function(e,t){var n,r,i,o,s,a,l,u=b[e+" "];if(u)return t?0:u.slice(0);for(s=e,a=[],l=_.preFilter;s;){for(o in n&&!(r=B.exec(s))||(r&&(s=s.slice(r[0].length)||s),a.push(i=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(M," ")}),s=s.slice(n.length)),_.filter)!(r=V[o].exec(s))||l[o]&&!(r=l[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):b(e,a).slice(0)},f=oe.compile=function(e,t){var n,m,v,y,b,r,i=[],o=[],s=D[e+" "];if(!s){for(t||(t=p(e)),n=t.length;n--;)(s=Ee(t[n]))[x]?i.push(s):o.push(s);(s=D(e,(m=o,v=i,y=0<v.length,b=0<m.length,r=function(e,t,n,r,i){var o,s,a,l=0,u="0",c=e&&[],f=[],d=w,h=e||b&&_.find.TAG("*",i),p=S+=null==d?1:Math.random()||.1,g=h.length;for(i&&(w=t===C||t||i);u!==g&&null!=(o=h[u]);u++){if(b&&o){for(s=0,t||o.ownerDocument===C||(E(o),n=!T);a=m[s++];)if(a(o,t||C,n)){r.push(o);break}i&&(S=p)}y&&((o=!a&&o)&&l--,e&&c.push(o))}if(l+=u,y&&u!==l){for(s=0;a=v[s++];)a(c,f,t,n);if(e){if(0<l)for(;u--;)c[u]||f[u]||(f[u]=N.call(r));f=_e(f)}I.apply(r,f),i&&!e&&0<f.length&&1<l+v.length&&oe.uniqueSort(r)}return i&&(S=p,w=d),c},y?ae(r):r))).selector=e}return s},g=oe.select=function(e,t,n,r){var i,o,s,a,l,u="function"==typeof e&&e,c=!r&&p(e=u.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&T&&_.relative[o[1].type]){if(!(t=(_.find.ID(s.matches[0].replace(Z,ee),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=V.needsContext.test(e)?0:o.length;i--&&(s=o[i],!_.relative[a=s.type]);)if((l=_.find[a])&&(r=l(s.matches[0].replace(Z,ee),J.test(o[0].type)&&ge(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&ve(o)))return I.apply(n,r),n;break}}return(u||f(e,c))(r,t,!T,n,!t||J.test(e)&&ge(t.parentNode)||t),n},h.sortStable=x.split("").sort(A).join("")===x,h.detectDuplicates=!!u,E(),h.sortDetached=le(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ue(L,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(g);T.find=p,T.expr=p.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=p.uniqueSort,T.text=p.getText,T.isXMLDoc=p.isXML,T.contains=p.contains,T.escapeSelector=p.escape;var x=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&T(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=T.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,n,r){return _(n)?T.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?T.grep(e,function(e){return e===n!==r}):"string"!=typeof n?T.grep(e,function(e){return-1<i.call(n,e)!==r}):T.filter(n,e,r)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<r;t++)if(T.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,i[t],n);return 1<r?T.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&D.test(e)?T(e):e||[],!1).length}});var k,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||k,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:I.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:m,!0)),O.test(r[1])&&T.isPlainObject(t))for(r in t)_(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=m.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):_(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,k=T(m);var j=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&T(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&T.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?T.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(T(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x(e,"parentNode")},parentsUntil:function(e,t,n){return x(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return x(e,"nextSibling")},prevAll:function(e){return x(e,"previousSibling")},nextUntil:function(e,t,n){return x(e,"nextSibling",n)},prevUntil:function(e,t,n){return x(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return A(e,"iframe")?e.contentDocument:(A(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},function(r,i){T.fn[r]=function(e,t){var n=T.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=T.filter(t,n)),1<this.length&&(P[r]||T.uniqueSort(n),j.test(r)&&n.reverse()),this.pushStack(n)}});var q=/[^\x20\t\r\n\f]+/g;function H(e){return e}function R(e){throw e}function W(e,t,n,r){var i;try{e&&_(i=e.promise)?i.call(e).done(t).fail(n):e&&_(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},T.each(e.match(q)||[],function(e,t){n[t]=!0}),n):T.extend({},r);var i,t,o,s,a=[],l=[],u=-1,c=function(){for(s=s||r.once,o=i=!0;l.length;u=-1)for(t=l.shift();++u<a.length;)!1===a[u].apply(t[0],t[1])&&r.stopOnFalse&&(u=a.length,t=!1);r.memory||(t=!1),i=!1,s&&(a=t?[]:"")},f={add:function(){return a&&(t&&!i&&(u=a.length-1,l.push(t)),function n(e){T.each(e,function(e,t){_(t)?r.unique&&f.has(t)||a.push(t):t&&t.length&&"string"!==C(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;-1<(n=T.inArray(t,a,n));)a.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<T.inArray(e,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=t="",this},disabled:function(){return!a},lock:function(){return s=l=[],t||i||(a=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},T.extend({Deferred:function(e){var o=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var i=arguments;return T.Deferred(function(r){T.each(o,function(e,t){var n=_(i[t[4]])&&i[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&_(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var l=0;function u(i,o,s,a){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<l)){if((e=s.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,_(t)?a?t.call(e,u(l,o,H,a),u(l,o,R,a)):(l++,t.call(e,u(l,o,H,a),u(l,o,R,a),u(l,o,H,o.notifyWith))):(s!==H&&(n=void 0,r=[e]),(a||o.resolveWith)(n,r))}},t=a?e:function(){try{e()}catch(e){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(s!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(T.Deferred.getStackHook&&(t.stackTrace=T.Deferred.getStackHook()),g.setTimeout(t))}}return T.Deferred(function(e){o[0][3].add(u(0,e,_(r)?r:H,e.notifyWith)),o[1][3].add(u(0,e,_(t)?t:H)),o[2][3].add(u(0,e,_(n)?n:R))}).promise()},promise:function(e){return null!=e?T.extend(e,s):s}},a={};return T.each(o,function(e,t){var n=t[2],r=t[5];s[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){var n=arguments.length,t=n,r=Array(t),i=a.call(arguments),o=T.Deferred(),s=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?a.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(W(e,o.done(s(t)).resolve,o.reject,!n),"pending"===o.state()||_(i[t]&&i[t].then)))return o.then();for(;t--;)W(i[t],s(t),o.reject);return o.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&F.test(e.name)&&g.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){g.setTimeout(function(){throw e})};var M=T.Deferred();function B(){m.removeEventListener("DOMContentLoaded",B),g.removeEventListener("load",B),T.ready()}T.fn.ready=function(e){return M.then(e).catch(function(e){T.readyException(e)}),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||((T.isReady=!0)!==e&&0<--T.readyWait||M.resolveWith(m,[T]))}}),T.ready.then=M.then,"complete"===m.readyState||"loading"!==m.readyState&&!m.documentElement.doScroll?g.setTimeout(T.ready):(m.addEventListener("DOMContentLoaded",B),g.addEventListener("load",B));var U=function(e,t,n,r,i,o,s){var a=0,l=e.length,u=null==n;if("object"===C(n))for(a in i=!0,n)U(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,_(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(T(e),n)})),t))for(;a<l;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):l?t(e[0],n):o},Q=/^-ms-/,K=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function V(e){return e.replace(Q,"ms-").replace(K,$)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function z(){this.expando=T.expando+z.uid++}z.uid=1,z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(q)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var X=new z,G=new z,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:J.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return G.hasData(e)||X.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),T.fn.extend({data:function(n,e){var t,r,i,o=this[0],s=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!X.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(r=s[t].name).indexOf("data-")&&(r=V(r.slice(5)),ee(o,r,i[r]));X.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){G.set(this,n)}):U(this,function(e){var t;if(o&&void 0===e){if(void 0!==(t=G.get(o,n)))return t;if(void 0!==(t=ee(o,n)))return t}else this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=X.get(e,t),n&&(!r||Array.isArray(n)?r=X.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,i=n.shift(),o=T._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){T.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:T.Callbacks("once memory").add(function(){X.remove(e,[t+"queue",n])})})}}),T.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?T.queue(this[0],t):void 0===n?this:this.each(function(){var e=T.queue(this,t,n);T._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&T.dequeue(this,t)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=T.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=X.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&T.contains(e.ownerDocument,e)&&"none"===T.css(e,"display")},oe=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=s[o];return i};var se={};function ae(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=X.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ie(r)&&(i[o]=(f=u=l=void 0,u=(a=r).ownerDocument,c=a.nodeName,(f=se[c])||(l=u.body.appendChild(u.createElement(c)),f=T.css(l,"display"),l.parentNode.removeChild(l),"none"===f&&(f="block"),se[c]=f)))):"none"!==n&&(i[o]="none",X.set(r,"display",n)));var a,l,u,c,f;for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}T.fn.extend({show:function(){return ae(this,!0)},hide:function(){return ae(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ie(this)?T(this).show():T(this).hide()})}});var le=/^(?:checkbox|radio)$/i,ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ce=/^$|^module$|\/(?:java|ecma)script/i,fe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function de(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?T.merge([e],n):n}function he(e,t){for(var n=0,r=e.length;n<r;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}fe.optgroup=fe.option,fe.tbody=fe.tfoot=fe.colgroup=fe.caption=fe.thead,fe.th=fe.td;var pe,ge,me=/<|&#?\w+;/;function ve(e,t,n,r,i){for(var o,s,a,l,u,c,f=t.createDocumentFragment(),d=[],h=0,p=e.length;h<p;h++)if((o=e[h])||0===o)if("object"===C(o))T.merge(d,o.nodeType?[o]:o);else if(me.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(ue.exec(o)||["",""])[1].toLowerCase(),l=fe[a]||fe._default,s.innerHTML=l[1]+T.htmlPrefilter(o)+l[2],c=l[0];c--;)s=s.lastChild;T.merge(d,s.childNodes),(s=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",h=0;o=d[h++];)if(r&&-1<T.inArray(o,r))i&&i.push(o);else if(u=T.contains(o.ownerDocument,o),s=de(f.appendChild(o),"script"),u&&he(s),n)for(c=0;o=s[c++];)ce.test(o.type||"")&&n.push(o);return f}pe=m.createDocumentFragment().appendChild(m.createElement("div")),(ge=m.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),pe.appendChild(ge),b.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",b.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue;var ye=m.documentElement,be=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,we=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Ce(){return!1}function Te(){try{return m.activeElement}catch(e){}}function xe(e,t,n,r,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)xe(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return T().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=T.guid++)),e.each(function(){T.event.add(this,t,i,r,n)})}T.event={global:{},add:function(t,e,n,r,i){var o,s,a,l,u,c,f,d,h,p,g,m=X.get(t);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(ye,i),n.guid||(n.guid=T.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(q)||[""]).length;u--;)h=g=(a=we.exec(e[u])||[])[1],p=(a[2]||"").split(".").sort(),h&&(f=T.event.special[h]||{},h=(i?f.delegateType:f.bindType)||h,f=T.event.special[h]||{},c=T.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:p.join(".")},o),(d=l[h])||((d=l[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,s)||t.addEventListener&&t.addEventListener(h,s)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),T.event.global[h]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,u,c,f,d,h,p,g,m=X.hasData(e)&&X.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(q)||[""]).length;u--;)if(h=g=(a=we.exec(t[u])||[])[1],p=(a[2]||"").split(".").sort(),h){for(f=T.event.special[h]||{},d=l[h=(r?f.delegateType:f.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));s&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,p,m.handle)||T.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)T.event.remove(e,h+t[u],n,r,!0);T.isEmptyObject(l)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=T.event.fix(e),l=new Array(arguments.length),u=(X.get(this,"events")||{})[a.type]||[],c=T.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=T.event.handlers.call(this,a,u),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?-1<T(i,this).index(u):T.find(i,this,null,[u]).length),s[i]&&o.push(r);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:_(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Te()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Te()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&A(this,"input"))return this.click(),!1},_default:function(e){return A(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){T.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||T.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),T.fn.extend({on:function(e,t,n,r){return xe(this,e,t,n,r)},one:function(e,t,n,r){return xe(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){T.event.remove(this,e,n,t)})}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,De=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function ke(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ie(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function je(e,t){var n,r,i,o,s,a,l,u;if(1===t.nodeType){if(X.hasData(e)&&(o=X.access(e),s=X.set(t,o),u=o.events))for(i in delete s.handle,s.events={},u)for(n=0,r=u[i].length;n<r;n++)T.event.add(t,i,u[i][n]);G.hasData(e)&&(a=G.access(e),l=T.extend({},a),G.set(t,l))}}function Pe(n,r,i,o){r=v.apply([],r);var e,t,s,a,l,u,c=0,f=n.length,d=f-1,h=r[0],p=_(h);if(p||1<f&&"string"==typeof h&&!b.checkClone&&Ae.test(h))return n.each(function(e){var t=n.eq(e);p&&(r[0]=h.call(this,e,t.html())),Pe(t,r,i,o)});if(f&&(t=(e=ve(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=T.map(de(e,"script"),ke)).length;c<f;c++)l=e,c!==d&&(l=T.clone(l,!0,!0),a&&T.merge(s,de(l,"script"))),i.call(n[c],l,c);if(a)for(u=s[s.length-1].ownerDocument,T.map(s,Ie),c=0;c<a;c++)l=s[c],ce.test(l.type||"")&&!X.access(l,"globalEval")&&T.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&T._evalUrl(l.src):E(l.textContent.replace(Oe,""),u,l))}return n}function Le(e,t,n){for(var r,i=t?T.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(de(r)),r.parentNode&&(n&&T.contains(r.ownerDocument,r)&&he(de(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a,l,u,c=e.cloneNode(!0),f=T.contains(e.ownerDocument,e);if(!(b.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(s=de(c),r=0,i=(o=de(e)).length;r<i;r++)a=o[r],l=s[r],void 0,"input"===(u=l.nodeName.toLowerCase())&&le.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||de(e),s=s||de(c),r=0,i=o.length;r<i;r++)je(o[r],s[r]);else je(e,c);return 0<(s=de(c,"script")).length&&he(s,!f&&de(e,"script")),c},cleanData:function(e){for(var t,n,r,i=T.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[X.expando]){if(t.events)for(r in t.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[X.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),T.fn.extend({detach:function(e){return Le(this,e,!0)},remove:function(e){return Le(this,e)},text:function(e){return U(this,function(e){return void 0===e?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Pe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)})},prepend:function(){return Pe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(de(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return U(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!fe[(ue.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(de(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Pe(this,arguments,function(e){var t=this.parentNode;T.inArray(this,n)<0&&(T.cleanData(de(this)),t&&t.replaceChild(e,this))},n)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){T.fn[e]=function(e){for(var t,n=[],r=T(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),T(r[o])[s](t),l.apply(n,t.get());return this.pushStack(n)}});var qe=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=new RegExp(re.join("|"),"i");function We(e,t,n){var r,i,o,s,a=e.style;return(n=n||He(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||T.contains(e.ownerDocument,e)||(s=T.style(e,t)),!b.pixelBoxStyles()&&qe.test(s)&&Re.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function Fe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ye.appendChild(a).appendChild(l);var e=g.getComputedStyle(l);n="1%"!==e.top,s=12===t(e.marginLeft),l.style.right="60%",o=36===t(e.right),r=36===t(e.width),l.style.position="absolute",i=36===l.offsetWidth||"absolute",ye.removeChild(a),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,s,a=m.createElement("div"),l=m.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",b.clearCloneStyle="content-box"===l.style.backgroundClip,T.extend(b,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i}}))}();var Me,Be,Ue=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},$e={letterSpacing:"0",fontWeight:"400"},Ve=["Webkit","Moz","ms"],Ye=m.createElement("div").style;function ze(e){var t=T.cssProps[e];return t||(t=T.cssProps[e]=function(e){if(e in Ye)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ve.length;n--;)if((e=Ve[n]+t)in Ye)return e}(e)||e),t}function Xe(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ge(e,t,n,r,i,o){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=T.css(e,n+re[s],!0,i)),r?("content"===n&&(l-=T.css(e,"padding"+re[s],!0,i)),"margin"!==n&&(l-=T.css(e,"border"+re[s]+"Width",!0,i))):(l+=T.css(e,"padding"+re[s],!0,i),"padding"!==n?l+=T.css(e,"border"+re[s]+"Width",!0,i):a+=T.css(e,"border"+re[s]+"Width",!0,i));return!r&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))),l}function Je(e,t,n){var r=He(e),i=We(e,t,r),o="border-box"===T.css(e,"boxSizing",!1,r),s=o;if(qe.test(i)){if(!n)return i;i="auto"}return s=s&&(b.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===T.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(i=parseFloat(i)||0)+Ge(e,t,n||(o?"border":"content"),s,r,i)+"px"}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=V(t),l=Qe.test(t),u=e.style;if(l||(t=ze(a)),s=T.cssHooks[t]||T.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"==(o=typeof n)&&(i=ne.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return T.css(e,t,"")},l=a(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),c=(T.cssNumber[t]||"px"!==u&&+l)&&ne.exec(T.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)T.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;c*=2,T.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(T.cssNumber[a]?"":"px")),b.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,s,a=V(t);return Qe.test(t)||(t=ze(a)),(s=T.cssHooks[t]||T.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=We(e,t,r)),"normal"===i&&t in $e&&(i=$e[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],function(e,a){T.cssHooks[a]={get:function(e,t,n){if(t)return!Ue.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Je(e,a,n):oe(e,Ke,function(){return Je(e,a,n)})},set:function(e,t,n){var r,i=He(e),o="border-box"===T.css(e,"boxSizing",!1,i),s=n&&Ge(e,a,n,o,i);return o&&b.scrollboxSize()===i.position&&(s-=Math.ceil(e["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(i[a])-Ge(e,a,"border",!1,i)-.5)),s&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[a]=t,t=T.css(e,a)),Xe(0,t,s)}}}),T.cssHooks.marginLeft=Fe(b.reliableMarginLeft,function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-oe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(i,o){T.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(T.cssHooks[i+o].set=Xe)}),T.fn.extend({css:function(e,t){return U(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=He(e),i=t.length;s<i;s++)o[t[s]]=T.css(e,t[s],!1,r);return o}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,1<arguments.length)}}),T.fn.delay=function(r,e){return r=T.fx&&T.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Me=m.createElement("input"),Be=m.createElement("select").appendChild(m.createElement("option")),Me.type="checkbox",b.checkOn=""!==Me.value,b.optSelected=Be.selected,(Me=m.createElement("input")).value="t",Me.type="radio",b.radioValue="t"===Me.value;var Ze,et=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return U(this,T.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?T.prop(e,t,n):(1===o&&T.isXMLDoc(e)||(i=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?Ze:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!b.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(q);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),Ze={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var s=et[t]||T.find.attr;et[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=et[o],et[o]=r,r=null!=s(e,t,n)?o:null,et[o]=i),r}});var tt=/^(?:input|select|textarea|button)$/i,nt=/^(?:a|area)$/i;function rt(e){return(e.match(q)||[]).join(" ")}function it(e){return e.getAttribute&&e.getAttribute("class")||""}function ot(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(q)||[]}T.fn.extend({prop:function(e,t){return U(this,T.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[T.propFix[e]||e]})}}),T.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(e)||(t=T.propFix[t]||t,i=T.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):tt.test(e.nodeName)||nt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),b.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(t){var e,n,r,i,o,s,a,l=0;if(_(t))return this.each(function(e){T(this).addClass(t.call(this,e,it(this)))});if((e=ot(t)).length)for(;n=this[l++];)if(i=it(n),r=1===n.nodeType&&" "+rt(i)+" "){for(s=0;o=e[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=rt(r))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,r,i,o,s,a,l=0;if(_(t))return this.each(function(e){T(this).removeClass(t.call(this,e,it(this)))});if(!arguments.length)return this.attr("class","");if((e=ot(t)).length)for(;n=this[l++];)if(i=it(n),r=1===n.nodeType&&" "+rt(i)+" "){for(s=0;o=e[s++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");i!==(a=rt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(i,t){var o=typeof i,s="string"===o||Array.isArray(i);return"boolean"==typeof t&&s?t?this.addClass(i):this.removeClass(i):_(i)?this.each(function(e){T(this).toggleClass(i.call(this,e,it(this),t),t)}):this.each(function(){var e,t,n,r;if(s)for(t=0,n=T(this),r=ot(i);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!==o||((e=it(this))&&X.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":X.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+rt(it(n))+" ").indexOf(t))return!0;return!1}});var st=/\r/g;T.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=_(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,T(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=T.map(t,function(e){return null==e?"":e+""})),(r=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=T.valHooks[t.type]||T.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(st,""):null==e?"":e:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:rt(T.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:i.length;for(r=o<0?l:s?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=T(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=T.makeArray(t),s=i.length;s--;)((r=i[s]).selected=-1<T.inArray(T.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<T.inArray(T(e).val(),t)}},b.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),b.focusin="onfocusin"in g;var at=/^(?:focusinfocus|focusoutblur)$/,lt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,n,r){var i,o,s,a,l,u,c,f,d=[n||m],h=y.call(e,"type")?e.type:e,p=y.call(e,"namespace")?e.namespace.split("."):[];if(o=f=s=n=n||m,3!==n.nodeType&&8!==n.nodeType&&!at.test(h+T.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),l=h.indexOf(":")<0&&"on"+h,(e=e[T.expando]?e:new T.Event(h,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:T.makeArray(t,[e]),c=T.event.special[h]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!w(n)){for(a=c.delegateType||h,at.test(a+h)||(o=o.parentNode);o;o=o.parentNode)d.push(o),s=o;s===(n.ownerDocument||m)&&d.push(s.defaultView||s.parentWindow||g)}for(i=0;(o=d[i++])&&!e.isPropagationStopped();)f=o,e.type=1<i?a:c.bindType||h,(u=(X.get(o,"events")||{})[e.type]&&X.get(o,"handle"))&&u.apply(o,t),(u=l&&o[l])&&u.apply&&Y(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=h,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!Y(n)||l&&_(n[h])&&!w(n)&&((s=n[l])&&(n[l]=null),T.event.triggered=h,e.isPropagationStopped()&&f.addEventListener(h,lt),n[h](),e.isPropagationStopped()&&f.removeEventListener(h,lt),T.event.triggered=void 0,s&&(n[l]=s)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),b.focusin||T.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){T.event.simulate(r,e.target,T.event.fix(e))};T.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=X.access(e,r);t||e.addEventListener(n,i,!0),X.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=X.access(e,r)-1;t?X.access(e,r,t):(e.removeEventListener(n,i,!0),X.remove(e,r))}}});var ut,ct=/\[\]$/,ft=/\r?\n/g,dt=/^(?:submit|button|image|reset|file)$/i,ht=/^(?:input|select|textarea|keygen)/i;function pt(n,e,r,i){var t;if(Array.isArray(e))T.each(e,function(e,t){r||ct.test(n)?i(n,t):pt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==C(e))i(n,e);else for(t in e)pt(n+"["+t+"]",e[t],r,i)}T.param=function(e,t){var n,r=[],i=function(e,t){var n=_(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){i(this.name,this.value)});else for(n in e)pt(n,e[n],t,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&ht.test(this.nodeName)&&!dt.test(e)&&(this.checked||!le.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(ft,"\r\n")}}):{name:t.name,value:n.replace(ft,"\r\n")}}).get()}}),T.fn.extend({wrapAll:function(e){var t;return this[0]&&(_(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return _(n)?this.each(function(e){T(this).wrapInner(n.call(this,e))}):this.each(function(){var e=T(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=_(t);return this.each(function(e){T(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.createHTMLDocument=((ut=m.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ut.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(b.createHTMLDocument?((r=(t=m.implementation.createHTMLDocument("")).createElement("base")).href=m.location.href,t.head.appendChild(r)):t=m),o=!n&&[],(i=O.exec(e))?[t.createElement(i[1])]:(i=ve([e],t,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.offset={setOffset:function(e,t,n){var r,i,o,s,a,l,u=T.css(e,"position"),c=T(e),f={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=T.css(e,"top"),l=T.css(e,"left"),("absolute"===u||"fixed"===u)&&-1<(o+l).indexOf("auto")?(s=(r=c.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),_(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):c.css(f)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){T.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),i.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-T.css(r,"marginTop",!0),left:t.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||ye})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;T.fn[t]=function(e){return U(this,function(e,t,n){var r;if(w(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),T.each(["top","left"],function(e,n){T.cssHooks[n]=Fe(b.pixelPosition,function(e,t){if(t)return t=We(e,n),qe.test(t)?T(e).position()[n]+"px":t})}),T.each({Height:"height",Width:"width"},function(s,a){T.each({padding:"inner"+s,content:a,"":"outer"+s},function(r,o){T.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return U(this,function(e,t,n){var r;return w(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+s],r["scroll"+s],e.body["offset"+s],r["offset"+s],r["client"+s])):void 0===n?T.css(e,t,i):T.style(e,t,n,i)},a,n?e:void 0,n)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){T.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),T.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),_(e))return r=a.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(a.call(arguments)))}).guid=e.guid=e.guid||T.guid++,i},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=A,T.isFunction=_,T.isWindow=w,T.camelCase=V,T.type=C,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var gt=g.jQuery,mt=g.$;return T.noConflict=function(e){return g.$===T&&(g.$=mt),e&&g.jQuery===T&&(g.jQuery=gt),T},e||(g.jQuery=g.$=T),T}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Popper=t()}(this,function(){"use strict";function s(e){return e&&"[object Function]"==={}.toString.call(e)}function _(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function d(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function p(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=_(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:p(d(e))}function g(e){return 11===e?U:10===e?Q:U||Q}function y(e){if(!e)return document.documentElement;for(var t=g(10)?document.body:null,n=e.offsetParent;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===_(n,"position")?y(n):n:e?e.ownerDocument.documentElement:document.documentElement}function c(e){return null===e.parentNode?e:c(e.parentNode)}function h(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var s,a,l=o.commonAncestorContainer;if(e!==l&&t!==l||r.contains(i))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&y(s.firstElementChild)!==s?y(l):l;var u=c(e);return u.host?h(u.host,t):h(e,c(t).host)}function m(e){var t="top"===(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function f(e,t){var n="x"===t?"Left":"Top",r="Left"==n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function r(e,t,n,r){return H(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],g(10)?n["offset"+e]+r["margin"+("Height"===e?"Top":"Left")]+r["margin"+("Height"===e?"Bottom":"Right")]:0)}function v(){var e=document.body,t=document.documentElement,n=g(10)&&getComputedStyle(t);return{height:r("Height",e,t,n),width:r("Width",e,t,n)}}function w(e){return V({},e,{right:e.left+e.width,bottom:e.top+e.height})}function b(e){var t={};try{if(g(10)){t=e.getBoundingClientRect();var n=m(e,"top"),r=m(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?v():{},s=o.width||e.clientWidth||i.right-i.left,a=o.height||e.clientHeight||i.bottom-i.top,l=e.offsetWidth-s,u=e.offsetHeight-a;if(l||u){var c=_(e);l-=f(c,"x"),u-=f(c,"y"),i.width-=l,i.height-=u}return w(i)}function E(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=g(10),i="HTML"===t.nodeName,o=b(e),s=b(t),a=p(e),l=_(t),u=parseFloat(l.borderTopWidth,10),c=parseFloat(l.borderLeftWidth,10);n&&"HTML"===t.nodeName&&(s.top=H(s.top,0),s.left=H(s.left,0));var f=w({top:o.top-s.top-u,left:o.left-s.left-c,width:o.width,height:o.height});if(f.marginTop=0,f.marginLeft=0,!r&&i){var d=parseFloat(l.marginTop,10),h=parseFloat(l.marginLeft,10);f.top-=u-d,f.bottom-=u-d,f.left-=c-h,f.right-=c-h,f.marginTop=d,f.marginLeft=h}return(r&&!n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(f=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=m(t,"top"),i=m(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(f,t)),f}function C(e){if(!e||!e.parentElement||g())return document.documentElement;for(var t=e.parentElement;t&&"none"===_(t,"transform");)t=t.parentElement;return t||document.documentElement}function T(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=i?C(e):h(e,t);if("viewport"===r)o=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=E(e,n),i=H(n.clientWidth,window.innerWidth||0),o=H(n.clientHeight,window.innerHeight||0),s=t?0:m(n),a=t?0:m(n,"left");return w({top:s-r.top+r.marginTop,left:a-r.left+r.marginLeft,width:i,height:o})}(s,i);else{var a;"scrollParent"===r?"BODY"===(a=p(d(t))).nodeName&&(a=e.ownerDocument.documentElement):a="window"===r?e.ownerDocument.documentElement:r;var l=E(a,s,i);if("HTML"!==a.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===_(t,"position")||e(d(t)))}(s))o=l;else{var u=v(),c=u.height,f=u.width;o.top+=l.top-l.marginTop,o.bottom=c+l.top,o.left+=l.left-l.marginLeft,o.right=f+l.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function a(e,t,r,n,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var s=T(r,n,o,i),a={top:{width:s.width,height:t.top-s.top},right:{width:s.right-t.right,height:s.height},bottom:{width:s.width,height:s.bottom-t.bottom},left:{width:t.left-s.left,height:s.height}},l=Object.keys(a).map(function(e){return V({key:e},a[e],{area:(t=a[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),u=l.filter(function(e){var t=e.width,n=e.height;return t>=r.clientWidth&&n>=r.clientHeight}),c=0<u.length?u[0].key:l[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function l(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return E(n,r?C(t):h(t,n),r)}function x(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function S(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function D(e,t,n){n=n.split("-")[0];var r=x(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",u=o?"width":"height";return i[s]=t[s]+t[l]/2-r[l]/2,i[a]=n===a?t[a]-r[u]:t[S(a)],i}function A(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function O(e,n,t){return(void 0===t?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=A(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",t))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var t=e.function||e.fn;e.enabled&&s(t)&&(n.offsets.popper=w(n.offsets.popper),n.offsets.reference=w(n.offsets.reference),n=t(n,e))}),n}function e(e,n){return e.some(function(e){var t=e.name;return e.enabled&&t===n})}function N(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function o(e){var t=e.ownerDocument;return t?t.defaultView:window}function t(e,t,n,r){n.updateBound=r,o(e).addEventListener("resize",n.updateBound,{passive:!0});var i=p(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,s=o?t.ownerDocument.defaultView:t;s.addEventListener(n,r,{passive:!0}),o||e(p(s.parentNode),n,r,i),i.push(s)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function n(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,o(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function k(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function u(n,r){Object.keys(r).forEach(function(e){var t="";-1!==["width","height","top","right","bottom","left"].indexOf(e)&&k(r[e])&&(t="px"),n.style[e]=r[e]+t})}function I(e,t,n){var r=A(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`";console.warn("`"+n+"` modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}function i(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=z.indexOf(e),r=z.slice(n+1).concat(z.slice(0,n));return t?r.reverse():r}function j(e,i,o,t){var s=[0,0],a=-1!==["right","left"].indexOf(t),n=e.split(/(\+|\-)/).map(function(e){return e.trim()}),r=n.indexOf(A(n,function(e){return-1!==e.search(/,|\s/)}));n[r]&&-1===n[r].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1===r?[n]:[n.slice(0,r).concat([n[r].split(l)[0]]),[n[r].split(l)[1]].concat(n.slice(r+1))];return(u=u.map(function(e,t){var n=(1===t?!a:a)?"height":"width",r=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,r=!0,e):r?(e[e.length-1]+=t,r=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],s=i[2];if(!o)return e;if(0===s.indexOf("%")){var a;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=r}return w(a)[t]/100*o}return"vh"===s||"vw"===s?("vh"===s?H(document.documentElement.clientHeight,window.innerHeight||0):H(document.documentElement.clientWidth,window.innerWidth||0))/100*o:o}(e,n,i,o)})})).forEach(function(n,r){n.forEach(function(e,t){k(e)&&(s[r]+=e*("-"===n[t-1]?-1:1))})}),s}for(var P=Math.min,L=Math.round,q=Math.floor,H=Math.max,R="undefined"!=typeof window&&"undefined"!=typeof document,W=["Edge","Trident","Firefox"],F=0,M=0;M<W.length;M+=1)if(R&&0<=navigator.userAgent.indexOf(W[M])){F=1;break}var B=R&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},F))}},U=R&&!(!window.MSInputMethodContext||!document.documentMode),Q=R&&/MSIE 10/.test(navigator.userAgent),K=function(){function r(e,t){for(var n,r=0;r<t.length;r++)(n=t[r]).enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),$=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},V=Object.assign||function(e){for(var t,n=1;n<arguments.length;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Y=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],z=Y.slice(3),X="flip",G="clockwise",J="counterclockwise",Z=function(){function o(e,t){var n=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,o),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=B(this.update.bind(this)),this.options=V({},o.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=t&&t.jquery?t[0]:t,this.options.modifiers={},Object.keys(V({},o.Defaults.modifiers,r.modifiers)).forEach(function(e){n.options.modifiers[e]=V({},o.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return V({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return K(o,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=l(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=a(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=D(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=O(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,e(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[N("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=t(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return n.call(this)}}]),o}();return Z.Utils=("undefined"==typeof window?global:window).PopperUtils,Z.placements=Y,Z.Defaults={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,s=i.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",u=a?"width":"height",c={start:$({},l,o[l]),end:$({},l,o[l]+o[u]-s[u])};e.offsets.popper=V({},s,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n,r=t.offset,i=e.placement,o=e.offsets,s=o.popper,a=o.reference,l=i.split("-")[0];return n=k(+r)?[+r,0]:j(r,s,a,l),"left"===l?(s.top+=n[0],s.left-=n[1]):"right"===l?(s.top+=n[0],s.left+=n[1]):"top"===l?(s.left+=n[0],s.top-=n[1]):"bottom"===l&&(s.left+=n[0],s.top+=n[1]),e.popper=s,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,r){var t=r.boundariesElement||y(e.instance.popper);e.instance.reference===t&&(t=y(t));var n=N("transform"),i=e.instance.popper.style,o=i.top,s=i.left,a=i[n];i.top="",i.left="",i[n]="";var l=T(e.instance.popper,e.instance.reference,r.padding,t,e.positionFixed);i.top=o,i.left=s,i[n]=a,r.boundaries=l;var u=r.priority,c=e.offsets.popper,f={primary:function(e){var t=c[e];return c[e]<l[e]&&!r.escapeWithReference&&(t=H(c[e],l[e])),$({},e,t)},secondary:function(e){var t="right"===e?"left":"top",n=c[t];return c[e]>l[e]&&!r.escapeWithReference&&(n=P(c[t],l[e]-("right"===e?c.width:c.height))),$({},t,n)}};return u.forEach(function(e){var t=-1===["left","top"].indexOf(e)?"secondary":"primary";c=V({},c,f[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=q,s=-1!==["top","bottom"].indexOf(i),a=s?"right":"bottom",l=s?"left":"top",u=s?"width":"height";return n[a]<o(r[l])&&(e.offsets.popper[l]=o(r[l])-n[u]),n[l]>o(r[a])&&(e.offsets.popper[l]=o(r[a])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!I(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,s=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(i),u=l?"height":"width",c=l?"Top":"Left",f=c.toLowerCase(),d=l?"left":"top",h=l?"bottom":"right",p=x(r)[u];a[h]-p<s[f]&&(e.offsets.popper[f]-=s[f]-(a[h]-p)),a[f]+p>s[h]&&(e.offsets.popper[f]+=a[f]+p-s[h]),e.offsets.popper=w(e.offsets.popper);var g=a[f]+a[u]/2-p/2,m=_(e.instance.popper),v=parseFloat(m["margin"+c],10),y=parseFloat(m["border"+c+"Width"],10),b=g-e.offsets.popper[f]-v-y;return b=H(P(s[u]-p,b),0),e.arrowElement=r,e.offsets.arrow=($(n={},f,L(b)),$(n,d,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(p,g){if(e(p.instance.modifiers,"inner"))return p;if(p.flipped&&p.placement===p.originalPlacement)return p;var m=T(p.instance.popper,p.instance.reference,g.padding,g.boundariesElement,p.positionFixed),v=p.placement.split("-")[0],y=S(v),b=p.placement.split("-")[1]||"",_=[];switch(g.behavior){case X:_=[v,y];break;case G:_=i(v);break;case J:_=i(v,!0);break;default:_=g.behavior}return _.forEach(function(e,t){if(v!==e||_.length===t+1)return p;v=p.placement.split("-")[0],y=S(v);var n,r=p.offsets.popper,i=p.offsets.reference,o=q,s="left"===v&&o(r.right)>o(i.left)||"right"===v&&o(r.left)<o(i.right)||"top"===v&&o(r.bottom)>o(i.top)||"bottom"===v&&o(r.top)<o(i.bottom),a=o(r.left)<o(m.left),l=o(r.right)>o(m.right),u=o(r.top)<o(m.top),c=o(r.bottom)>o(m.bottom),f="left"===v&&a||"right"===v&&l||"top"===v&&u||"bottom"===v&&c,d=-1!==["top","bottom"].indexOf(v),h=!!g.flipVariations&&(d&&"start"===b&&a||d&&"end"===b&&l||!d&&"start"===b&&u||!d&&"end"===b&&c);(s||f||h)&&(p.flipped=!0,(s||f)&&(v=_[t+1]),h&&(b="end"===(n=b)?"start":"start"===n?"end":n),p.placement=v+(b?"-"+b:""),p.offsets.popper=V({},p.offsets.popper,D(p.instance.popper,p.offsets.reference,p.placement)),p=O(p.instance.modifiers,p,"flip"))}),p},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return i[s?"left":"top"]=o[n]-(a?i[s?"width":"height"]:0),e.placement=S(t),e.offsets.popper=w(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!I(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=A(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=A(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s,a,l=void 0===o?t.gpuAcceleration:o,u=b(y(e.instance.popper)),c={position:i.position},f={left:q(i.left),top:L(i.top),bottom:L(i.bottom),right:q(i.right)},d="bottom"===n?"top":"bottom",h="right"===r?"left":"right",p=N("transform");if(a="bottom"==d?-u.height+f.bottom:f.top,s="right"==h?-u.width+f.right:f.left,l&&p)c[p]="translate3d("+s+"px, "+a+"px, 0)",c[d]=0,c[h]=0,c.willChange="transform";else{var g="bottom"==d?-1:1,m="right"==h?-1:1;c[d]=a*g,c[h]=s*m,c.willChange=d+", "+h}var v={"x-placement":e.placement};return e.attributes=V({},v,e.attributes),e.styles=V({},c,e.styles),e.arrowStyles=V({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){return u(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1===n[e]?t.removeAttribute(e):t.setAttribute(e,n[e])}),e.arrowElement&&Object.keys(e.arrowStyles).length&&u(e.arrowElement,e.arrowStyles),e;var t,n},onLoad:function(e,t,n,r,i){var o=l(i,t,e,n.positionFixed),s=a(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",s),u(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Z}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):e.Util=t(e.jQuery)}(this,function(e){"use strict";return function(r){var t="transitionend";function e(e){var t=this,n=!1;return r(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(t)},e),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");t&&"#"!==t||(t=e.getAttribute("href")||"");try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=r(e).css("transition-duration");return parseFloat(t)?(t=t.split(",")[0],1e3*parseFloat(t)):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){r(e).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=t[r],s=o&&l.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(s))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+s+'" but expected type "'+i+'".')}var a}};return r.fn.emulateTransitionEnd=e,r.event.special[l.TRANSITION_END]={bindType:t,delegateType:t,handle:function(e){if(r(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},l}(e=e&&e.hasOwnProperty("default")?e.default:e)}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],t):e.Tooltip=t(e.jQuery,e.Popper,e.Util)}(this,function(e,c,f){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}var d,a,l,u,t,h,p,g,m,v,y,b,_,w,E,C,T,x,S,D,A,n;return e=e&&e.hasOwnProperty("default")?e.default:e,c=c&&c.hasOwnProperty("default")?c.default:c,f=f&&f.hasOwnProperty("default")?f.default:f,a="tooltip",u="."+(l="bs.tooltip"),t=(d=e).fn[a],h="bs-tooltip",p=new RegExp("(^|\\s)"+h+"\\S+","g"),v={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(m={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(g={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},b="out",_={HIDE:"hide"+u,HIDDEN:"hidden"+u,SHOW:(y="show")+u,SHOWN:"shown"+u,INSERTED:"inserted"+u,CLICK:"click"+u,FOCUSIN:"focusin"+u,FOCUSOUT:"focusout"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u},w="fade",E="show",C=".tooltip-inner",T=".arrow",x="hover",S="focus",D="click",A="manual",n=function(){function r(e,t){if(void 0===c)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var e,t,n,i=r.prototype;return i.enable=function(){this._isEnabled=!0},i.disable=function(){this._isEnabled=!1},i.toggleEnabled=function(){this._isEnabled=!this._isEnabled},i.toggle=function(e){if(this._isEnabled)if(e){var t=this.constructor.DATA_KEY,n=d(e.currentTarget).data(t);n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),d(e.currentTarget).data(t,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(d(this.getTipElement()).hasClass(E))return void this._leave(null,this);this._enter(null,this)}},i.dispose=function(){clearTimeout(this._timeout),d.removeData(this.element,this.constructor.DATA_KEY),d(this.element).off(this.constructor.EVENT_KEY),d(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&d(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},i.show=function(){var t=this;if("none"===d(this.element).css("display"))throw new Error("Please use show on visible elements");var e=d.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){d(this.element).trigger(e);var n=d.contains(this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!n)return;var r=this.getTipElement(),i=f.getUID(this.constructor.NAME);r.setAttribute("id",i),this.element.setAttribute("aria-describedby",i),this.setContent(),this.config.animation&&d(r).addClass(w);var o="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,s=this._getAttachment(o);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:d(document).find(this.config.container);d(r).data(this.constructor.DATA_KEY,this),d.contains(this.element.ownerDocument.documentElement,this.tip)||d(r).appendTo(a),d(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new c(this.element,r,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:T},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),d(r).addClass(E),"ontouchstart"in document.documentElement&&d(document.body).children().on("mouseover",null,d.noop);var l=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,d(t.element).trigger(t.constructor.Event.SHOWN),e===b&&t._leave(null,t)};if(d(this.tip).hasClass(w)){var u=f.getTransitionDurationFromElement(this.tip);d(this.tip).one(f.TRANSITION_END,l).emulateTransitionEnd(u)}else l()}},i.hide=function(e){var t=this,n=this.getTipElement(),r=d.Event(this.constructor.Event.HIDE),i=function(){t._hoverState!==y&&n.parentNode&&n.parentNode.removeChild(n),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),d(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),e&&e()};if(d(this.element).trigger(r),!r.isDefaultPrevented()){if(d(n).removeClass(E),"ontouchstart"in document.documentElement&&d(document.body).children().off("mouseover",null,d.noop),this._activeTrigger[D]=!1,this._activeTrigger[S]=!1,this._activeTrigger[x]=!1,d(this.tip).hasClass(w)){var o=f.getTransitionDurationFromElement(n);d(n).one(f.TRANSITION_END,i).emulateTransitionEnd(o)}else i();this._hoverState=""}},i.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},i.isWithContent=function(){return Boolean(this.getTitle())},i.addAttachmentClass=function(e){d(this.getTipElement()).addClass(h+"-"+e)},i.getTipElement=function(){return this.tip=this.tip||d(this.config.template)[0],this.tip},i.setContent=function(){var e=this.getTipElement();this.setElementContent(d(e.querySelectorAll(C)),this.getTitle()),d(e).removeClass(w+" "+E)},i.setElementContent=function(e,t){var n=this.config.html;"object"==typeof t&&(t.nodeType||t.jquery)?n?d(t).parent().is(e)||e.empty().append(t):e.text(d(t).text()):e[n?"html":"text"](t)},i.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},i._getAttachment=function(e){return m[e.toUpperCase()]},i._setListeners=function(){var r=this;this.config.trigger.split(" ").forEach(function(e){if("click"===e)d(r.element).on(r.constructor.Event.CLICK,r.config.selector,function(e){return r.toggle(e)});else if(e!==A){var t=e===x?r.constructor.Event.MOUSEENTER:r.constructor.Event.FOCUSIN,n=e===x?r.constructor.Event.MOUSELEAVE:r.constructor.Event.FOCUSOUT;d(r.element).on(t,r.config.selector,function(e){return r._enter(e)}).on(n,r.config.selector,function(e){return r._leave(e)})}d(r.element).closest(".modal").on("hide.bs.modal",function(){return r.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},i._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},i._enter=function(e,t){var n=this.constructor.DATA_KEY;(t=t||d(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),d(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusin"===e.type?S:x]=!0),d(t.getTipElement()).hasClass(E)||t._hoverState===y?t._hoverState=y:(clearTimeout(t._timeout),t._hoverState=y,t.config.delay&&t.config.delay.show?t._timeout=setTimeout(function(){t._hoverState===y&&t.show()},t.config.delay.show):t.show())},i._leave=function(e,t){var n=this.constructor.DATA_KEY;(t=t||d(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),d(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusout"===e.type?S:x]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=b,t.config.delay&&t.config.delay.hide?t._timeout=setTimeout(function(){t._hoverState===b&&t.hide()},t.config.delay.hide):t.hide())},i._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},i._getConfig=function(e){return"number"==typeof(e=s({},this.constructor.Default,d(this.element).data(),"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),f.typeCheckConfig(a,e,this.constructor.DefaultType),e},i._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},i._cleanTipClass=function(){var e=d(this.getTipElement()),t=e.attr("class").match(p);null!==t&&t.length&&e.removeClass(t.join(""))},i._handlePopperPlacementChange=function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},i._fixTransition=function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&(d(e).removeClass(w),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},r._jQueryInterface=function(n){return this.each(function(){var e=d(this).data(l),t="object"==typeof n&&n;if((e||!/dispose|hide/.test(n))&&(e||(e=new r(this,t),d(this).data(l,e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},e=r,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return v}},{key:"NAME",get:function(){return a}},{key:"DATA_KEY",get:function(){return l}},{key:"Event",get:function(){return _}},{key:"EVENT_KEY",get:function(){return u}},{key:"DefaultType",get:function(){return g}}],(t=null)&&o(e.prototype,t),n&&o(e,n),r}(),d.fn[a]=n._jQueryInterface,d.fn[a].Constructor=n,d.fn[a].noConflict=function(){return d.fn[a]=t,n._jQueryInterface},n}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./tooltip.js")):"function"==typeof define&&define.amd?define(["jquery","./tooltip.js"],t):e.Popover=t(e.jQuery,e.Tooltip)}(this,function(e,t){"use strict";function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}var u,c,f,d,r,h,p,g,m,v,y,b,_,w,i;return e=e&&e.hasOwnProperty("default")?e.default:e,t=t&&t.hasOwnProperty("default")?t.default:t,c="popover",d="."+(f="bs.popover"),r=(u=e).fn[c],h="bs-popover",p=new RegExp("(^|\\s)"+h+"\\S+","g"),g=n({},t.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),m=n({},t.DefaultType,{content:"(string|element|function)"}),v="fade",b=".popover-header",_=".popover-body",w={HIDE:"hide"+d,HIDDEN:"hidden"+d,SHOW:(y="show")+d,SHOWN:"shown"+d,INSERTED:"inserted"+d,CLICK:"click"+d,FOCUSIN:"focusin"+d,FOCUSOUT:"focusout"+d,MOUSEENTER:"mouseenter"+d,MOUSELEAVE:"mouseleave"+d},i=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),(t.prototype.constructor=t).__proto__=n;var i,o,s,a=r.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(e){u(this.getTipElement()).addClass(h+"-"+e)},a.getTipElement=function(){return this.tip=this.tip||u(this.config.template)[0],this.tip},a.setContent=function(){var e=u(this.getTipElement());this.setElementContent(e.find(b),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this.element)),this.setElementContent(e.find(_),t),e.removeClass(v+" "+y)},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var e=u(this.getTipElement()),t=e.attr("class").match(p);null!==t&&0<t.length&&e.removeClass(t.join(""))},r._jQueryInterface=function(n){return this.each(function(){var e=u(this).data(f),t="object"==typeof n?n:null;if((e||!/destroy|hide/.test(n))&&(e||(e=new r(this,t),u(this).data(f,e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},i=r,s=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return g}},{key:"NAME",get:function(){return c}},{key:"DATA_KEY",get:function(){return f}},{key:"Event",get:function(){return w}},{key:"EVENT_KEY",get:function(){return d}},{key:"DefaultType",get:function(){return m}}],(o=null)&&l(i.prototype,o),s&&l(i,s),r}(t),u.fn[c]=i._jQueryInterface,u.fn[c].Constructor=i,u.fn[c].noConflict=function(){return u.fn[c]=r,i._jQueryInterface},i}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Alert=t(e.jQuery,e.Util)}(this,function(e,o){"use strict";function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,t,l,n,r,u,c,f,d,i;return e=e&&e.hasOwnProperty("default")?e.default:e,o=o&&o.hasOwnProperty("default")?o.default:o,t="alert",n="."+(l="bs.alert"),r=(a=e).fn[t],u={CLOSE:"close"+n,CLOSED:"closed"+n,CLICK_DATA_API:"click"+n+".data-api"},c="alert",f="fade",d="show",i=function(){function r(e){this._element=e}var e,t,n,i=r.prototype;return i.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},i.dispose=function(){a.removeData(this._element,l),this._element=null},i._getRootElement=function(e){var t=o.getSelectorFromElement(e),n=!1;return t&&(n=document.querySelector(t)),n||(n=a(e).closest("."+c)[0]),n},i._triggerCloseEvent=function(e){var t=a.Event(u.CLOSE);return a(e).trigger(t),t},i._removeElement=function(t){var n=this;if(a(t).removeClass(d),a(t).hasClass(f)){var e=o.getTransitionDurationFromElement(t);a(t).one(o.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(e)}else this._destroyElement(t)},i._destroyElement=function(e){a(e).detach().trigger(u.CLOSED).remove()},r._jQueryInterface=function(n){return this.each(function(){var e=a(this),t=e.data(l);t||(t=new r(this),e.data(l,t)),"close"===n&&t[n](this)})},r._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},e=r,n=[{key:"VERSION",get:function(){return"4.1.3"}}],(t=null)&&s(e.prototype,t),n&&s(e,n),r}(),a(document).on(u.CLICK_DATA_API,'[data-dismiss="alert"]',i._handleDismiss(new i)),a.fn[t]=i._jQueryInterface,a.fn[t].Constructor=i,a.fn[t].noConflict=function(){return a.fn[t]=r,i._jQueryInterface},i}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):e.Button=t(e.jQuery)}(this,function(e){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s,t,a,n,r,i,l,u,c,f,d,h,p,g,m,v;return e=e&&e.hasOwnProperty("default")?e.default:e,t="button",n="."+(a="bs.button"),r=".data-api",i=(s=e).fn[t],l="active",u="btn",f='[data-toggle^="button"]',d='[data-toggle="buttons"]',h="input",p=".active",g=".btn",m={CLICK_DATA_API:"click"+n+r,FOCUS_BLUR_DATA_API:(c="focus")+n+r+" blur"+n+r},v=function(){function n(e){this._element=e}var e,t,r,i=n.prototype;return i.toggle=function(){var e=!0,t=!0,n=s(this._element).closest(d)[0];if(n){var r=this._element.querySelector(h);if(r){if("radio"===r.type)if(r.checked&&this._element.classList.contains(l))e=!1;else{var i=n.querySelector(p);i&&s(i).removeClass(l)}if(e){if(r.hasAttribute("disabled")||n.hasAttribute("disabled")||r.classList.contains("disabled")||n.classList.contains("disabled"))return;r.checked=!this._element.classList.contains(l),s(r).trigger("change")}r.focus(),t=!1}}t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(l)),e&&s(this._element).toggleClass(l)},i.dispose=function(){s.removeData(this._element,a),this._element=null},n._jQueryInterface=function(t){return this.each(function(){var e=s(this).data(a);e||(e=new n(this),s(this).data(a,e)),"toggle"===t&&e[t]()})},e=n,r=[{key:"VERSION",get:function(){return"4.1.3"}}],(t=null)&&o(e.prototype,t),r&&o(e,r),n}(),s(document).on(m.CLICK_DATA_API,f,function(e){e.preventDefault();var t=e.target;s(t).hasClass(u)||(t=s(t).closest(g)),v._jQueryInterface.call(s(t),"toggle")}).on(m.FOCUS_BLUR_DATA_API,f,function(e){var t=s(e.target).closest(g)[0];s(t).toggleClass(c,/^focus(in)?$/.test(e.type))}),s.fn[t]=v._jQueryInterface,s.fn[t].Constructor=v,s.fn[t].noConflict=function(){return s.fn[t]=i,v._jQueryInterface},v}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Carousel=t(e.jQuery,e.Util)}(this,function(e,h){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}var p,a,l,u,t,n,c,f,g,d,m,v,y,b,_,w,E,C,T,x,S,D,A,O,N,r,o,k;return e=e&&e.hasOwnProperty("default")?e.default:e,h=h&&h.hasOwnProperty("default")?h.default:h,a="carousel",u="."+(l="bs.carousel"),t=".data-api",n=(p=e).fn[a],c={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},f={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},g="next",d="prev",m="left",v="right",y={SLIDE:"slide"+u,SLID:"slid"+u,KEYDOWN:"keydown"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u,TOUCHEND:"touchend"+u,LOAD_DATA_API:"load"+u+t,CLICK_DATA_API:"click"+u+t},b="carousel",_="active",w="slide",E="carousel-item-right",C="carousel-item-left",T="carousel-item-next",x="carousel-item-prev",S=".active",D=".active.carousel-item",A=".carousel-item",O=".carousel-item-next, .carousel-item-prev",N=".carousel-indicators",r="[data-slide], [data-slide-to]",o='[data-ride="carousel"]',k=function(){function o(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(t),this._element=p(e)[0],this._indicatorsElement=this._element.querySelector(N),this._addEventListeners()}var e,t,n,r=o.prototype;return r.next=function(){this._isSliding||this._slide(g)},r.nextWhenVisible=function(){!document.hidden&&p(this._element).is(":visible")&&"hidden"!==p(this._element).css("visibility")&&this.next()},r.prev=function(){this._isSliding||this._slide(d)},r.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(O)&&(h.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},r.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},r.to=function(e){var t=this;this._activeElement=this._element.querySelector(D);var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)p(this._element).one(y.SLID,function(){return t.to(e)});else{if(n===e)return this.pause(),void this.cycle();var r=n<e?g:d;this._slide(r,this._items[e])}},r.dispose=function(){p(this._element).off(u),p.removeData(this._element,l),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},r._getConfig=function(e){return e=s({},c,e),h.typeCheckConfig(a,e,f),e},r._addEventListeners=function(){var t=this;this._config.keyboard&&p(this._element).on(y.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(p(this._element).on(y.MOUSEENTER,function(e){return t.pause(e)}).on(y.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&p(this._element).on(y.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},r._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},r._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(A)):[],this._items.indexOf(e)},r._getItemByDirection=function(e,t){var n=e===g,r=e===d,i=this._getItemIndex(t),o=this._items.length-1;if((r&&0===i||n&&i===o)&&!this._config.wrap)return t;var s=(i+(e===d?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},r._triggerSlideEvent=function(e,t){var n=this._getItemIndex(e),r=this._getItemIndex(this._element.querySelector(D)),i=p.Event(y.SLIDE,{relatedTarget:e,direction:t,from:r,to:n});return p(this._element).trigger(i),i},r._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var t=[].slice.call(this._indicatorsElement.querySelectorAll(S));p(t).removeClass(_);var n=this._indicatorsElement.children[this._getItemIndex(e)];n&&p(n).addClass(_)}},r._slide=function(e,t){var n,r,i,o=this,s=this._element.querySelector(D),a=this._getItemIndex(s),l=t||s&&this._getItemByDirection(e,s),u=this._getItemIndex(l),c=Boolean(this._interval);if(e===g?(n=C,r=T,i=m):(n=E,r=x,i=v),l&&p(l).hasClass(_))this._isSliding=!1;else if(!this._triggerSlideEvent(l,i).isDefaultPrevented()&&s&&l){this._isSliding=!0,c&&this.pause(),this._setActiveIndicatorElement(l);var f=p.Event(y.SLID,{relatedTarget:l,direction:i,from:a,to:u});if(p(this._element).hasClass(w)){p(l).addClass(r),h.reflow(l),p(s).addClass(n),p(l).addClass(n);var d=h.getTransitionDurationFromElement(s);p(s).one(h.TRANSITION_END,function(){p(l).removeClass(n+" "+r).addClass(_),p(s).removeClass(_+" "+r+" "+n),o._isSliding=!1,setTimeout(function(){return p(o._element).trigger(f)},0)}).emulateTransitionEnd(d)}else p(s).removeClass(_),p(l).addClass(_),this._isSliding=!1,p(this._element).trigger(f);c&&this.cycle()}},o._jQueryInterface=function(r){return this.each(function(){var e=p(this).data(l),t=s({},c,p(this).data());"object"==typeof r&&(t=s({},t,r));var n="string"==typeof r?r:t.slide;if(e||(e=new o(this,t),p(this).data(l,e)),"number"==typeof r)e.to(r);else if("string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}else t.interval&&(e.pause(),e.cycle())})},o._dataApiClickHandler=function(e){var t=h.getSelectorFromElement(this);if(t){var n=p(t)[0];if(n&&p(n).hasClass(b)){var r=s({},p(n).data(),p(this).data()),i=this.getAttribute("data-slide-to");i&&(r.interval=!1),o._jQueryInterface.call(p(n),r),i&&p(n).data(l).to(i),e.preventDefault()}}},e=o,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return c}}],(t=null)&&i(e.prototype,t),n&&i(e,n),o}(),p(document).on(y.CLICK_DATA_API,r,k._dataApiClickHandler),p(window).on(y.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(o)),t=0,n=e.length;t<n;t++){var r=p(e[t]);k._jQueryInterface.call(r,r.data())}}),p.fn[a]=k._jQueryInterface,p.fn[a].Constructor=k,p.fn[a].noConflict=function(){return p.fn[a]=n,k._jQueryInterface},k}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Collapse=t(e.jQuery,e.Util)}(this,function(e,l){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}var u,s,c,t,n,f,d,h,p,g,m,v,y,b,_,w,a;return e=e&&e.hasOwnProperty("default")?e.default:e,l=l&&l.hasOwnProperty("default")?l.default:l,s="collapse",t="."+(c="bs.collapse"),n=(u=e).fn[s],f={toggle:!0,parent:""},d={toggle:"boolean",parent:"(string|element)"},h={SHOW:"show"+t,SHOWN:"shown"+t,HIDE:"hide"+t,HIDDEN:"hidden"+t,CLICK_DATA_API:"click"+t+".data-api"},p="show",g="collapse",m="collapsing",v="collapsed",y="width",b="height",_=".show, .collapsing",w='[data-toggle="collapse"]',a=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=u.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(w)),r=0,i=n.length;r<i;r++){var o=n[r],s=l.getSelectorFromElement(o),a=[].slice.call(document.querySelectorAll(s)).filter(function(e){return e===t});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e,t,n,r=a.prototype;return r.toggle=function(){u(this._element).hasClass(p)?this.hide():this.show()},r.show=function(){var e,t,n=this;if(!this._isTransitioning&&!u(this._element).hasClass(p)&&(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(_)).filter(function(e){return e.getAttribute("data-parent")===n._config.parent})).length&&(e=null),!(e&&(t=u(e).not(this._selector).data(c))&&t._isTransitioning))){var r=u.Event(h.SHOW);if(u(this._element).trigger(r),!r.isDefaultPrevented()){e&&(a._jQueryInterface.call(u(e).not(this._selector),"hide"),t||u(e).data(c,null));var i=this._getDimension();u(this._element).removeClass(g).addClass(m),this._element.style[i]=0,this._triggerArray.length&&u(this._triggerArray).removeClass(v).attr("aria-expanded",!0),this.setTransitioning(!0);var o="scroll"+(i[0].toUpperCase()+i.slice(1)),s=l.getTransitionDurationFromElement(this._element);u(this._element).one(l.TRANSITION_END,function(){u(n._element).removeClass(m).addClass(g).addClass(p),n._element.style[i]="",n.setTransitioning(!1),u(n._element).trigger(h.SHOWN)}).emulateTransitionEnd(s),this._element.style[i]=this._element[o]+"px"}}},r.hide=function(){var e=this;if(!this._isTransitioning&&u(this._element).hasClass(p)){var t=u.Event(h.HIDE);if(u(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",l.reflow(this._element),u(this._element).addClass(m).removeClass(g).removeClass(p);var r=this._triggerArray.length;if(0<r)for(var i=0;i<r;i++){var o=this._triggerArray[i],s=l.getSelectorFromElement(o);if(null!==s)u([].slice.call(document.querySelectorAll(s))).hasClass(p)||u(o).addClass(v).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[n]="";var a=l.getTransitionDurationFromElement(this._element);u(this._element).one(l.TRANSITION_END,function(){e.setTransitioning(!1),u(e._element).removeClass(m).addClass(g).trigger(h.HIDDEN)}).emulateTransitionEnd(a)}}},r.setTransitioning=function(e){this._isTransitioning=e},r.dispose=function(){u.removeData(this._element,c),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},r._getConfig=function(e){return(e=o({},f,e)).toggle=Boolean(e.toggle),l.typeCheckConfig(s,e,d),e},r._getDimension=function(){return u(this._element).hasClass(y)?y:b},r._getParent=function(){var n=this,e=null;l.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',r=[].slice.call(e.querySelectorAll(t));return u(r).each(function(e,t){n._addAriaAndCollapsedClass(a._getTargetFromElement(t),[t])}),e},r._addAriaAndCollapsedClass=function(e,t){if(e){var n=u(e).hasClass(p);t.length&&u(t).toggleClass(v,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(e){var t=l.getSelectorFromElement(e);return t?document.querySelector(t):null},a._jQueryInterface=function(r){return this.each(function(){var e=u(this),t=e.data(c),n=o({},f,e.data(),"object"==typeof r&&r?r:{});if(!t&&n.toggle&&/show|hide/.test(r)&&(n.toggle=!1),t||(t=new a(this,n),e.data(c,t)),"string"==typeof r){if(void 0===t[r])throw new TypeError('No method named "'+r+'"');t[r]()}})},e=a,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return f}}],(t=null)&&i(e.prototype,t),n&&i(e,n),a}(),u(document).on(h.CLICK_DATA_API,w,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=u(this),t=l.getSelectorFromElement(this),r=[].slice.call(document.querySelectorAll(t));u(r).each(function(){var e=u(this),t=e.data(c)?"toggle":n.data();a._jQueryInterface.call(e,t)})}),u.fn[s]=a._jQueryInterface,u.fn[s].Constructor=a,u.fn[s].noConflict=function(){return u.fn[s]=n,a._jQueryInterface},a}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],t):e.Dropdown=t(e.jQuery,e.Popper,e.Util)}(this,function(e,o,s){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}var c,l,f,d,t,n,h,p,g,m,v,y,b,_,w,E,r,C,T,x,S,D,A,O,N,k,I,j,u;return e=e&&e.hasOwnProperty("default")?e.default:e,o=o&&o.hasOwnProperty("default")?o.default:o,s=s&&s.hasOwnProperty("default")?s.default:s,l="dropdown",d="."+(f="bs.dropdown"),t=".data-api",n=(c=e).fn[l],h=new RegExp("38|40|27"),p={HIDE:"hide"+d,HIDDEN:"hidden"+d,SHOW:"show"+d,SHOWN:"shown"+d,CLICK:"click"+d,CLICK_DATA_API:"click"+d+t,KEYDOWN_DATA_API:"keydown"+d+t,KEYUP_DATA_API:"keyup"+d+t},g="disabled",m="show",v="dropup",y="dropright",b="dropleft",_="dropdown-menu-right",w="position-static",E='[data-toggle="dropdown"]',r=".dropdown form",C=".dropdown-menu",T=".navbar-nav",x=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",S="top-start",D="top-end",A="bottom-start",O="bottom-end",N="right-start",k="left-start",I={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},j={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},u=function(){function u(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e,t,n,r=u.prototype;return r.toggle=function(){if(!this._element.disabled&&!c(this._element).hasClass(g)){var e=u._getParentFromElement(this._element),t=c(this._menu).hasClass(m);if(u._clearMenus(),!t){var n={relatedTarget:this._element},r=c.Event(p.SHOW,n);if(c(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if(void 0===o)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var i=this._element;"parent"===this._config.reference?i=e:s.isElement(this._config.reference)&&(i=this._config.reference,void 0!==this._config.reference.jquery&&(i=this._config.reference[0])),"scrollParent"!==this._config.boundary&&c(e).addClass(w),this._popper=new o(i,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===c(e).closest(T).length&&c(document.body).children().on("mouseover",null,c.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),c(this._menu).toggleClass(m),c(e).toggleClass(m).trigger(c.Event(p.SHOWN,n))}}}},r.dispose=function(){c.removeData(this._element,f),c(this._element).off(d),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},r.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},r._addEventListeners=function(){var t=this;c(this._element).on(p.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},r._getConfig=function(e){return e=a({},this.constructor.Default,c(this._element).data(),e),s.typeCheckConfig(l,e,this.constructor.DefaultType),e},r._getMenuElement=function(){if(!this._menu){var e=u._getParentFromElement(this._element);e&&(this._menu=e.querySelector(C))}return this._menu},r._getPlacement=function(){var e=c(this._element.parentNode),t=A;return e.hasClass(v)?(t=S,c(this._menu).hasClass(_)&&(t=D)):e.hasClass(y)?t=N:e.hasClass(b)?t=k:c(this._menu).hasClass(_)&&(t=O),t},r._detectNavbar=function(){return 0<c(this._element).closest(".navbar").length},r._getPopperConfig=function(){var t=this,e={};"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},u._jQueryInterface=function(t){return this.each(function(){var e=c(this).data(f);if(e||(e=new u(this,"object"==typeof t?t:null),c(this).data(f,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},u._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var t=[].slice.call(document.querySelectorAll(E)),n=0,r=t.length;n<r;n++){var i=u._getParentFromElement(t[n]),o=c(t[n]).data(f),s={relatedTarget:t[n]};if(e&&"click"===e.type&&(s.clickEvent=e),o){var a=o._menu;if(c(i).hasClass(m)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&c.contains(i,e.target))){var l=c.Event(p.HIDE,s);c(i).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&c(document.body).children().off("mouseover",null,c.noop),t[n].setAttribute("aria-expanded","false"),c(a).removeClass(m),c(i).removeClass(m).trigger(c.Event(p.HIDDEN,s)))}}}},u._getParentFromElement=function(e){var t,n=s.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},u._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||c(e.target).closest(C).length)):h.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!c(this).hasClass(g))){var t=u._getParentFromElement(this),n=c(t).hasClass(m);if((n||27===e.which&&32===e.which)&&(!n||27!==e.which&&32!==e.which)){var r=[].slice.call(t.querySelectorAll(x));if(0!==r.length){var i=r.indexOf(e.target);38===e.which&&0<i&&i--,40===e.which&&i<r.length-1&&i++,i<0&&(i=0),r[i].focus()}}else{if(27===e.which){var o=t.querySelector(E);c(o).trigger("focus")}c(this).trigger("click")}}},e=u,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return I}},{key:"DefaultType",get:function(){return j}}],(t=null)&&i(e.prototype,t),n&&i(e,n),u}(),c(document).on(p.KEYDOWN_DATA_API,E,u._dataApiKeydownHandler).on(p.KEYDOWN_DATA_API,C,u._dataApiKeydownHandler).on(p.CLICK_DATA_API+" "+p.KEYUP_DATA_API,u._clearMenus).on(p.CLICK_DATA_API,E,function(e){e.preventDefault(),e.stopPropagation(),u._jQueryInterface.call(c(this),"toggle")}).on(p.CLICK_DATA_API,r,function(e){e.stopPropagation()}),c.fn[l]=u._jQueryInterface,c.fn[l].Constructor=u,c.fn[l].noConflict=function(){return c.fn[l]=n,u._jQueryInterface},u}),function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||4<=t[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}($),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Modal=t(e.jQuery,e.Util)}(this,function(e,s){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}var l,u,c,f,t,d,h,p,g,m,v,y,b,_,n,w,E,C,T;return e=e&&e.hasOwnProperty("default")?e.default:e,s=s&&s.hasOwnProperty("default")?s.default:s,u="modal",f="."+(c="bs.modal"),t=(l=e).fn[u],d={backdrop:!0,keyboard:!0,focus:!0,show:!0},h={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},p={HIDE:"hide"+f,HIDDEN:"hidden"+f,SHOW:"show"+f,SHOWN:"shown"+f,FOCUSIN:"focusin"+f,RESIZE:"resize"+f,CLICK_DISMISS:"click.dismiss"+f,KEYDOWN_DISMISS:"keydown.dismiss"+f,MOUSEUP_DISMISS:"mouseup.dismiss"+f,MOUSEDOWN_DISMISS:"mousedown.dismiss"+f,CLICK_DATA_API:"click"+f+".data-api"},g="modal-scrollbar-measure",m="modal-backdrop",v="modal-open",y="fade",b="show",_=".modal-dialog",n='[data-toggle="modal"]',w='[data-dismiss="modal"]',E=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",C=".sticky-top",T=function(){function i(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(_),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var e,t,n,r=i.prototype;return r.toggle=function(e){return this._isShown?this.hide():this.show(e)},r.show=function(e){var t=this;if(!this._isTransitioning&&!this._isShown){l(this._element).hasClass(y)&&(this._isTransitioning=!0);var n=l.Event(p.SHOW,{relatedTarget:e});l(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),l(document.body).addClass(v),this._setEscapeEvent(),this._setResizeEvent(),l(this._element).on(p.CLICK_DISMISS,w,function(e){return t.hide(e)}),l(this._dialog).on(p.MOUSEDOWN_DISMISS,function(){l(t._element).one(p.MOUSEUP_DISMISS,function(e){l(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))}},r.hide=function(e){var t=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var n=l.Event(p.HIDE);if(l(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var r=l(this._element).hasClass(y);if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),l(document).off(p.FOCUSIN),l(this._element).removeClass(b),l(this._element).off(p.CLICK_DISMISS),l(this._dialog).off(p.MOUSEDOWN_DISMISS),r){var i=s.getTransitionDurationFromElement(this._element);l(this._element).one(s.TRANSITION_END,function(e){return t._hideModal(e)}).emulateTransitionEnd(i)}else this._hideModal()}}},r.dispose=function(){l.removeData(this._element,c),l(window,document,this._element,this._backdrop).off(f),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},r.handleUpdate=function(){this._adjustDialog()},r._getConfig=function(e){return e=a({},d,e),s.typeCheckConfig(u,e,h),e},r._showElement=function(e){var t=this,n=l(this._element).hasClass(y);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&s.reflow(this._element),l(this._element).addClass(b),this._config.focus&&this._enforceFocus();var r=l.Event(p.SHOWN,{relatedTarget:e}),i=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,l(t._element).trigger(r)};if(n){var o=s.getTransitionDurationFromElement(this._element);l(this._dialog).one(s.TRANSITION_END,i).emulateTransitionEnd(o)}else i()},r._enforceFocus=function(){var t=this;l(document).off(p.FOCUSIN).on(p.FOCUSIN,function(e){document!==e.target&&t._element!==e.target&&0===l(t._element).has(e.target).length&&t._element.focus()})},r._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?l(this._element).on(p.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||l(this._element).off(p.KEYDOWN_DISMISS)},r._setResizeEvent=function(){var t=this;this._isShown?l(window).on(p.RESIZE,function(e){return t.handleUpdate(e)}):l(window).off(p.RESIZE)},r._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){l(document.body).removeClass(v),e._resetAdjustments(),e._resetScrollbar(),l(e._element).trigger(p.HIDDEN)})},r._removeBackdrop=function(){this._backdrop&&(l(this._backdrop).remove(),this._backdrop=null)},r._showBackdrop=function(e){var t=this,n=l(this._element).hasClass(y)?y:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=m,n&&this._backdrop.classList.add(n),l(this._backdrop).appendTo(document.body),l(this._element).on(p.CLICK_DISMISS,function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===t._config.backdrop?t._element.focus():t.hide())}),n&&s.reflow(this._backdrop),l(this._backdrop).addClass(b),!e)return;if(!n)return void e();var r=s.getTransitionDurationFromElement(this._backdrop);l(this._backdrop).one(s.TRANSITION_END,e).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){l(this._backdrop).removeClass(b);var i=function(){t._removeBackdrop(),e&&e()};if(l(this._element).hasClass(y)){var o=s.getTransitionDurationFromElement(this._backdrop);l(this._backdrop).one(s.TRANSITION_END,i).emulateTransitionEnd(o)}else i()}else e&&e()},r._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},r._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},r._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},r._setScrollbar=function(){var i=this;if(this._isBodyOverflowing){var e=[].slice.call(document.querySelectorAll(E)),t=[].slice.call(document.querySelectorAll(C));l(e).each(function(e,t){var n=t.style.paddingRight,r=l(t).css("padding-right");l(t).data("padding-right",n).css("padding-right",parseFloat(r)+i._scrollbarWidth+"px")}),l(t).each(function(e,t){var n=t.style.marginRight,r=l(t).css("margin-right");l(t).data("margin-right",n).css("margin-right",parseFloat(r)-i._scrollbarWidth+"px")});var n=document.body.style.paddingRight,r=l(document.body).css("padding-right");l(document.body).data("padding-right",n).css("padding-right",parseFloat(r)+this._scrollbarWidth+"px")}},r._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(E));l(e).each(function(e,t){var n=l(t).data("padding-right");l(t).removeData("padding-right"),t.style.paddingRight=n||""});var t=[].slice.call(document.querySelectorAll(""+C));l(t).each(function(e,t){var n=l(t).data("margin-right");void 0!==n&&l(t).css("margin-right",n).removeData("margin-right")});var n=l(document.body).data("padding-right");l(document.body).removeData("padding-right"),document.body.style.paddingRight=n||""},r._getScrollbarWidth=function(){var e=document.createElement("div");e.className=g,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},i._jQueryInterface=function(n,r){return this.each(function(){var e=l(this).data(c),t=a({},d,l(this).data(),"object"==typeof n&&n?n:{});if(e||(e=new i(this,t),l(this).data(c,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n](r)}else t.show&&e.show(r)})},e=i,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return d}}],(t=null)&&o(e.prototype,t),n&&o(e,n),i}(),l(document).on(p.CLICK_DATA_API,n,function(e){var t,n=this,r=s.getSelectorFromElement(this);r&&(t=document.querySelector(r));var i=l(t).data(c)?"toggle":a({},l(t).data(),l(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var o=l(t).one(p.SHOW,function(e){e.isDefaultPrevented()||o.one(p.HIDDEN,function(){l(n).is(":visible")&&n.focus()})});T._jQueryInterface.call(l(t),i,this)}),l.fn[u]=T._jQueryInterface,l.fn[u].Constructor=T,l.fn[u].noConflict=function(){return l.fn[u]=t,T._jQueryInterface},T}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.ScrollSpy=t(e.jQuery,e.Util)}(this,function(e,s){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,l,u,c,t,f,d,h,p,g,r,m,v,y,b,_,w,E,C,T,x,i;return e=e&&e.hasOwnProperty("default")?e.default:e,s=s&&s.hasOwnProperty("default")?s.default:s,l="scrollspy",c="."+(u="bs.scrollspy"),t=(a=e).fn[l],f={offset:10,method:"auto",target:""},d={offset:"number",method:"string",target:"(string|element)"},h={ACTIVATE:"activate"+c,SCROLL:"scroll"+c,LOAD_DATA_API:"load"+c+".data-api"},p="dropdown-item",g="active",r='[data-spy="scroll"]',m=".active",v=".nav, .list-group",y=".nav-link",b=".nav-item",_=".list-group-item",w=".dropdown",E=".dropdown-item",C=".dropdown-toggle",T="offset",x="position",i=function(){function n(e,t){var n=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" "+y+","+this._config.target+" "+_+","+this._config.target+" "+E,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,a(this._scrollElement).on(h.SCROLL,function(e){return n._process(e)}),this.refresh(),this._process()}var e,t,r,i=n.prototype;return i.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?T:x,i="auto"===this._config.method?e:this._config.method,o=i===x?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(e){var t,n=s.getSelectorFromElement(e);if(n&&(t=document.querySelector(n)),t){var r=t.getBoundingClientRect();if(r.width||r.height)return[a(t)[i]().top+o,n]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},i.dispose=function(){a.removeData(this._element,u),a(this._scrollElement).off(c),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},i._getConfig=function(e){if("string"!=typeof(e=function(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}({},f,"object"==typeof e&&e?e:{})).target){var t=a(e.target).attr("id");t||(t=s.getUID(l),a(e.target).attr("id",t)),e.target="#"+t}return s.typeCheckConfig(l,e,d),e},i._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},i._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},i._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},i._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),n<=e){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;){this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1])&&this._activate(this._targets[i])}}},i._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",");e=e.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var n=a([].slice.call(document.querySelectorAll(e.join(","))));n.hasClass(p)?(n.closest(w).find(C).addClass(g),n.addClass(g)):(n.addClass(g),n.parents(v).prev(y+", "+_).addClass(g),n.parents(v).prev(b).children(y).addClass(g)),a(this._scrollElement).trigger(h.ACTIVATE,{relatedTarget:t})},i._clear=function(){var e=[].slice.call(document.querySelectorAll(this._selector));a(e).filter(m).removeClass(g)},n._jQueryInterface=function(t){return this.each(function(){var e=a(this).data(u);if(e||(e=new n(this,"object"==typeof t&&t),a(this).data(u,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},e=n,r=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return f}}],(t=null)&&o(e.prototype,t),r&&o(e,r),n}(),a(window).on(h.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(r)),t=e.length;t--;){var n=a(e[t]);i._jQueryInterface.call(n,n.data())}}),a.fn[l]=i._jQueryInterface,a.fn[l].Constructor=i,a.fn[l].noConflict=function(){return a.fn[l]=t,i._jQueryInterface},i}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Tab=t(e.jQuery,e.Util)}(this,function(e,u){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c,s,t,n,f,a,d,h,l,p,g,m,v,y,r,b,_,i;return e=e&&e.hasOwnProperty("default")?e.default:e,u=u&&u.hasOwnProperty("default")?u.default:u,t="."+(s="bs.tab"),n=(c=e).fn.tab,f={HIDE:"hide"+t,HIDDEN:"hidden"+t,SHOW:"show"+t,SHOWN:"shown"+t,CLICK_DATA_API:"click"+t+".data-api"},a="dropdown-menu",d="active",h="disabled",l="fade",p="show",g=".dropdown",m=".nav, .list-group",v=".active",y="> li > .active",r='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',b=".dropdown-toggle",_="> .dropdown-menu .active",i=function(){function r(e){this._element=e}var e,t,n,i=r.prototype;return i.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&c(this._element).hasClass(d)||c(this._element).hasClass(h))){var e,r,t=c(this._element).closest(m)[0],i=u.getSelectorFromElement(this._element);if(t){var o="UL"===t.nodeName?y:v;r=(r=c.makeArray(c(t).find(o)))[r.length-1]}var s=c.Event(f.HIDE,{relatedTarget:this._element}),a=c.Event(f.SHOW,{relatedTarget:r});if(r&&c(r).trigger(s),c(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){i&&(e=document.querySelector(i)),this._activate(this._element,t);var l=function(){var e=c.Event(f.HIDDEN,{relatedTarget:n._element}),t=c.Event(f.SHOWN,{relatedTarget:r});c(r).trigger(e),c(n._element).trigger(t)};e?this._activate(e,e.parentNode,l):l()}}},i.dispose=function(){c.removeData(this._element,s),this._element=null},i._activate=function(e,t,n){var r=this,i=("UL"===t.nodeName?c(t).find(y):c(t).children(v))[0],o=n&&i&&c(i).hasClass(l),s=function(){return r._transitionComplete(e,i,n)};if(i&&o){var a=u.getTransitionDurationFromElement(i);c(i).one(u.TRANSITION_END,s).emulateTransitionEnd(a)}else s()},i._transitionComplete=function(e,t,n){if(t){c(t).removeClass(p+" "+d);var r=c(t.parentNode).find(_)[0];r&&c(r).removeClass(d),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(c(e).addClass(d),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),u.reflow(e),c(e).addClass(p),e.parentNode&&c(e.parentNode).hasClass(a)){var i=c(e).closest(g)[0];if(i){var o=[].slice.call(i.querySelectorAll(b));c(o).addClass(d)}e.setAttribute("aria-expanded",!0)}n&&n()},r._jQueryInterface=function(n){return this.each(function(){var e=c(this),t=e.data(s);if(t||(t=new r(this),e.data(s,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},e=r,n=[{key:"VERSION",get:function(){return"4.1.3"}}],(t=null)&&o(e.prototype,t),n&&o(e,n),r}(),c(document).on(f.CLICK_DATA_API,r,function(e){e.preventDefault(),i._jQueryInterface.call(c(this),"show")}),c.fn.tab=i._jQueryInterface,c.fn.tab.Constructor=i,c.fn.tab.noConflict=function(){return c.fn.tab=n,i._jQueryInterface},i}),console.log("Helllllllo!!!");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
